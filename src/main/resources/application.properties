spring.application.name=OrderService
server.port=8084

# DataSource Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/orders
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate Settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#spring.profiles.active=dev

# Use a dummy value to indicate no real service is running.
#product.service.url=dummy

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8081

product.service.url=lb://ProdCatService

eureka.client.service-url.defaultZone=http://localhost:8761/eureka

eureka.instance.hostname=localhost
eureka.instance.preferIpAddress=true

springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# Actuator endpoints to expose
management.endpoints.web.exposure.include=health,info,metrics,loggers

# Customize actuator base path (optional)
management.endpoints.web.base-path=/actuator

# Show full health details (e.g., DB status)
management.endpoint.health.show-details=always


spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
order.kafka.topic.placed=order_placed
order.kafka.topic.cancelled=order_cancelled


resilience4j.retry.instances.productService.max-attempts=3
resilience4j.retry.instances.productService.wait-duration=2s
resilience4j.retry.instances.productService.retry-exceptions=org.springframework.web.client.ResourceAccessException,
java.net.ConnectException,
java.net.SocketTimeoutException,
org.springframework.web.client.HttpServerErrorException


# Enable Prometheus-specific actuator endpoint
management.endpoint.prometheus.enabled=true


# OAuth2 Resource Server Using JWT
# If your auth service exposes a JWK Set endpoint automatically via issuer-uri:
#spring.security.oauth2.resourceserver.jwt.issuer-uri=https://your-auth-service.example.com

# Alternatively, if you want to specify the JWK Set URL directly:
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://your-auth-service.example.com/.well-known/jwks.json
