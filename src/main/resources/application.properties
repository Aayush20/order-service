spring.application.name=order-service
server.port=8083

# DataSource Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/orders
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate Settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#spring.profiles.active=dev

# Use a dummy value to indicate no real service is running.
#product.service.url=dummy

#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8081

# JWT issuer
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://auth-service

product.service.url=lb://ProdCatService
auth.service.url=http://auth-service


# Eureka config
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.instance.hostname=localhost
eureka.instance.prefer-ip-address=true



# Actuator endpoints to expose
management.endpoints.web.exposure.include=health,info,metrics,loggers,prometheus

# Customize actuator base path (optional)
management.endpoints.web.base-path=/actuator

# Show full health details (e.g., DB status)
management.endpoint.health.show-details=always


spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
order.kafka.topic.placed=order_placed
order.kafka.topic.cancelled=order_cancelled
payment.kafka.topic.failed=payment_failed

# Kafka
spring.kafka.consumer.group-id=order-service-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*



resilience4j.retry.instances.productService.max-attempts=3
resilience4j.retry.instances.productService.wait-duration=2s
resilience4j.circuitbreaker.instances.productService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.productService.sliding-window-size=10
resilience4j.circuitbreaker.instances.productService.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.productService.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.productService.minimum-number-of-calls=3
logging.level.io.github.resilience4j=DEBUG
logging.level.org.springframework.web.client=DEBUG

# Order expiry TTL in minutes
order.expiry.minutes=30


springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true
springdoc.swagger.oauth2.use-pkce-with-authorization-code-grant=true
springdoc.api-docs.enabled=true

# SendGrid Email
sendgrid.api-key=SG.your-real-api-key
sendgrid.sender-email=your_verified_sender@example.com
sendgrid.sender-name=Order Service


# Redis Configuration
spring.cache.type=redis
spring.data.redis.host=localhost
spring.data.redis.port=6379

# Optional TTL override
cache.ttl.order-cache=600

# Logging
logging.level.org.springframework.cache=DEBUG



#resilience4j.retry.instances.productService.retry-exceptions=org.springframework.web.client.ResourceAccessException,
#java.net.ConnectException,
#java.net.SocketTimeoutException,
#org.springframework.web.client.HttpServerErrorException


# Enable Prometheus-specific actuator endpoint
#management.endpoint.prometheus.enabled=true


# OAuth2 Resource Server Using JWT
# If your auth service exposes a JWK Set endpoint automatically via issuer-uri:
#spring.security.oauth2.resourceserver.jwt.issuer-uri=https://your-auth-service.example.com

# Alternatively, if you want to specify the JWK Set URL directly:
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://your-auth-service.example.com/.well-known/jwks.json
